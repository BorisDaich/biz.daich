package biz.daich.common.tools.jpa;

import javax.persistence.AttributeConverter;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import biz.daich.common.gson.GsonTools;

/**
 * Very generic AttributeConverter is here to serve as a fall back in case there is no better option
 */
public class ObjectAsJsonAttributeConverter implements AttributeConverter<Object, String>
{
    private static final String TYPE_JSON_ELEMENT = "_type_";
    private static final Logger l                 = LogManager.getLogger(ObjectAsJsonAttributeConverter.class.getName());
    /**
     * reference to the GSon instance that will be used
     */
    protected final Gson        gson;

    /**
     * Use the GsonTools.getDefaultGson() as default implementation
     */
    public ObjectAsJsonAttributeConverter()
    {
        this(GsonTools.getDefaultGson());
    }

    /**
     * @param gsonInstance
     *            -provide your own Gson configured as you like it . Throws if provided null
     */
    public ObjectAsJsonAttributeConverter(Gson gsonInstance)
    {
        Preconditions.checkArgument(gsonInstance != null);
        gson = gsonInstance;
    }

    /**
     * takes an object and creates an JSON representation through the gson
     *
     * @see javax.persistence.AttributeConverter#convertToDatabaseColumn(java.lang.Object)
     */
    @Override
    public String convertToDatabaseColumn(Object attribute)
    {
        if (attribute == null) return null;

        JsonElement jsonTree = gson.toJsonTree(attribute);
        if (jsonTree.isJsonObject())
        {
            jsonTree.getAsJsonObject().addProperty(TYPE_JSON_ELEMENT, attribute.getClass().getName());
        }
        String json = gson.toJson(jsonTree);
        return json;
    }

    /**
     * deserializes a JSON to an object using the default Gson instance
     * <br>
     * expects that the JSON is generated with the public String convertToDatabaseColumn(Object attribute) method
     * if the JSON structure does not match the one generated by the method above will return default Object created by the GSon that is TreeMap of the key value pairs of the Json
     *
     * @see javax.persistence.AttributeConverter#convertToEntityAttribute(java.lang.Object)
     */
    @Override
    public Object convertToEntityAttribute(String jsonString)
    {
        if (Strings.isNullOrEmpty(jsonString)) return null;

        Object fromJson = null;

        JsonObject jobj = gson.fromJson(jsonString, JsonObject.class);
        JsonElement jsonElement = jobj.get(TYPE_JSON_ELEMENT);
        try
        {
            if (jsonElement != null)
            {
                String type = jsonElement.getAsString();
                l.debug("JSON is serialization of a Class: " + type);
                Class<?> forName = Class.forName(type);
                l.debug("Loaded Class " + forName.getCanonicalName());
                fromJson = gson.fromJson(jobj, forName);
                return fromJson;
            }
            else
            {
                l.warn("this JSON is NOT an object serialized as we would expect");
            }
        }
        catch (ClassNotFoundException e)
        {
            l.warn("this JSON is not a class that we know", e);
        }
        fromJson = gson.fromJson(jsonString, Object.class);
        return fromJson;
    }

    //    public static void main(String[] args)
    //    {
    //    }

}
